from nose.tools import set_trace
import json
from geoalchemy2 import Geography
from sqlalchemy import func
from sqlalchemy.sql.expression import cast

from model import (
    get_one_or_create,
    Place,
)

class GeographyLoader(object):
    """Load Place objects from a NDJSON document like that generated by
    geojson-places-us.
    """

    def __init__(self, _db):
        self._db = _db
        self.places_by_external_id=dict()
        
    def load_ndjson(self, fh):
        while True:
            metadata = fh.readline().strip()
            if not metadata:
                # End of file.
                break
            geography = fh.readline().strip()
            yield self.load(metadata, geography)

    def load(self, metadata, geography):
        metadata = json.loads(metadata)
        external_id = metadata['id']
        type = metadata['type']
        parent_external_id = metadata['parent_id']
        name = metadata['name']
        full_name = metadata.get('full_name', None)
        aliases = metadata.get('aliases', [])
        abbreviated_name = metadata.get('abbreviated_name', None)

        if parent_external_id:
            parent = self.places_by_external_id[parent_external_id]
        else:
            parent = None

        # This gives us a Geometry object.
        geometry = func.ST_GeomFromGeoJSON(geography)

        # We want real-world coordinates. Convert it into a Geography.
        geography = cast(geometry, Geography)
        place, is_new = get_one_or_create(
            self._db, Place, external_id=external_id, type=type,
            parent=parent,
            create_method_kwargs = dict(geography=geography)
        )

        # Set these values, even the ones that were set in
        # create_method_kwargs, so that we can update any that have
        # changed.
        place.external_name = name
        place.abbreviated_name = abbreviated_name
        place.geography = geography

        # TODO: aliases are ignored since there is currently no
        # database table that can hold them.

        self.places_by_external_id[external_id] = place
        return place, is_new
